== SageOne

This solution was developed in Ruby 2.2.2 and Rails 4.2.1 following some rules described here[https://github.com/Sage/sageone_br_programming_exercises/blob/master/remote_web_application_use_case.md].

=== Introduction

It is basically a system that allows an user to manage his products and also import them from another two systems: BlueBill and YouDoInvoice. The import is done by uploading the database files (once a time).

=== Specifications

First of all, the looking at the described model, the following database was created:

{ER Diagram}[https://raw.githubusercontent.com/felipegruoso/sage_one/master/tmp/sage_one_er.png]

On BlueBill specifications, there were any restriction about duplicated fields, that's why the database model allows the product to have more than one category and selling value.

Talking about the YouDoInvoice file, the required validation about duplicated fields was made. In additional, the amount valiation was not made because of the acceptance criteria #4. Validating this quantity, ff the header specifies a number lower than the quantity of products inside the file, not all products are imported.

The system documentation doesn't say anything about validate if the product already exists on the database, but the opposite: If the file is valid, import all.

=== Running the application

To run this application locally, it is necessary to copy it to your system. It can be done following this sequence:

 git clone https://github.com/felipegruoso/sage_one.git
 cd sage_one
 bundle install
 rake db:create
 rake db:migrate
 rails s -b PORT

It is possible to check more details by running yardoc server:

 yard server -b PORT
